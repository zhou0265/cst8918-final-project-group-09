{
  "version": 3,
  "sources": ["empty-module:@remix-run/node", "../../../app/routes/_index.tsx", "../../../app/utils/text-formatting.ts"],
  "sourcesContent": ["module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_index.tsx\");\n  import.meta.hot.lastModified = \"1744940789921.925\";\n}\n// REMIX HMR END\n\nimport { json } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { fetchWeatherData } from '../api-services/open-weather-service';\nimport { capitalizeFirstLetter } from '../utils/text-formatting';\nexport const meta = () => {\n  return [{\n    title: 'Remix Weather'\n  }, {\n    name: 'description',\n    content: 'A demo web app using Remix and OpenWeather API.'\n  }];\n};\nconst location = {\n  city: 'Ottawa',\n  postalCode: 'K2G 1V8',\n  // Algonquin College, Woodroffe Campus\n  lat: 45.3211,\n  lon: -75.7391,\n  countryCode: 'CA'\n};\nconst units = 'metric';\nexport async function loader() {\n  // TODO: accept query params for location and units\n  // TODO: look up location by postal code\n\n  const data = await fetchWeatherData({\n    lat: location.lat,\n    lon: location.lon,\n    units: units\n  });\n  return json({\n    currentConditions: data\n  });\n}\nexport default function CurrentConditions() {\n  _s();\n  const {\n    currentConditions\n  } = useLoaderData();\n  const weather = currentConditions.weather[0];\n  return <>\n      <main style={{\n      padding: '1.5rem',\n      fontFamily: 'system-ui, sans-serif',\n      lineHeight: '1.8'\n    }}>\n        <h1>Remix Weather</h1>\n        <p>\n          For Algonquin College, Woodroffe Campus <br />\n          <span style={{\n          color: 'hsl(220, 23%, 60%)'\n        }}>\n            (LAT: {location.lat}, LON: {location.lon})\n          </span>\n        </p>\n        <h2>Current Conditions</h2>\n        <div style={{\n        display: 'flex',\n        flexDirection: 'row',\n        gap: '2rem',\n        alignItems: 'center'\n      }}>\n          <img src={getWeatherIconUrl(weather.icon)} alt=\"\" />\n          <div style={{\n          fontSize: '2rem'\n        }}>\n            {currentConditions.main.temp.toFixed(1)}\u00B0C\n          </div>\n        </div>\n        <p style={{\n        fontSize: '1.2rem',\n        fontWeight: '400'\n      }}>\n          {capitalizeFirstLetter(weather.description)}. Feels like{' '}\n          {currentConditions.main['feels_like'].toFixed(1)}\u00B0C.\n          <br />\n          <span style={{\n          color: 'hsl(220, 23%, 60%)',\n          fontSize: '0.85rem'\n        }}>\n            updated at{' '}\n            {new Intl.DateTimeFormat('en-CA', {\n            year: 'numeric',\n            month: 'long',\n            day: 'numeric',\n            hour: 'numeric',\n            minute: '2-digit'\n          }).format(currentConditions.dt * 1000)}\n          </span>\n        </p>\n      </main>\n      <section style={{\n      backgroundColor: 'hsl(220, 54%, 96%)',\n      padding: '0.5rem 1.5rem 1rem 1.5rem',\n      borderRadius: '0.25rem'\n    }}>\n        <h2>Raw Data</h2>\n        <pre>{JSON.stringify(currentConditions, null, 2)}</pre>\n      </section>\n      <hr style={{\n      marginTop: '2rem'\n    }} />\n      <p>\n        Learn how to customize this app. Read the{' '}\n        <a target=\"_blank\" href=\"https://remix.run/docs\" rel=\"noreferrer\">\n          Remix Docs\n        </a>\n      </p>\n    </>;\n}\n_s(CurrentConditions, \"EJhl3j3f6SSzabnu2OKQa4P8QLw=\", false, function () {\n  return [useLoaderData];\n});\n_c = CurrentConditions;\nfunction getWeatherIconUrl(iconCode) {\n  return `http://openweathermap.org/img/wn/${iconCode}@2x.png`;\n}\nvar _c;\n$RefreshReg$(_c, \"CurrentConditions\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;", "// REMIX HMR BEGIN\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\nimport.meta.hot = __hmr__.createHotContext(\n//@ts-expect-error\n\"app/utils/text-formatting.ts\"\n);\nimport.meta.hot.lastModified = \"1744940789919.788\";\n}\n// REMIX HMR END\n\nexport function capitalizeFirstLetter(sourceString: string) {\n  return sourceString.charAt(0).toUpperCase() + sourceString.slice(1)\n}\n"],
  "mappings": "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",
  "names": []
}
